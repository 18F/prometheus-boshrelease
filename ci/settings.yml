---
meta:
  name:    prometheus
  target:  sw
  url:     https://ci.starkandwayne.com

  initial_version: 1.1.0

  bosh-lite:
    target: https://10.58.111.49:25555
    username: (( vault "secret/bosh-lites/lite49/users/admin:username" ))
    password: (( vault "secret/bosh-lites/lite49/users/admin:password" ))
    cacert:   (( vault "secret/bosh-lites/lite49/certs:rootCA.pem" ))

  aws:
    bucket: prometheus-boshrelease
    access_key: (( vault "secret/aws/cfcommunity:access" ))
    secret_key: (( vault "secret/aws/cfcommunity:secret" ))

  github:
    owner:  cloudfoundry-community
    repo:   (( concat meta.name "-boshrelease" ))
    branch: master
    private_key:  (( vault "secret/pipelines/shared/github:private_key" ))
    access_token: (( vault "secret/pipelines/shared/github:access_token" ))

  slack:
    webhook:       (( vault "secret/pipelines/prometheus-boshrelease/slack:webhook" ))
    channel:       '#prometheus'
    username:      starkandwayne-ci
    icon:          https://cl.ly/0o401h3l1x3R/logo-50x50.png
    blob_success:  '(( concat "$BUILD_PIPELINE_NAME: New version of $BUILD_JOB_NAME was detected, and updated in master. <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME| Cut a new release?>" ))'
    blob_failure:  '(( concat "$BUILD_PIPELINE_NAME: :airplane_arriving: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to update the blob for $BUILD_JOB_NAME>" ))'

groups:
- name: blobs
  jobs:
  - prometheus
  - alertmanager
  - blackbox_exporter
  - haproxy_exporter
  - statsd_exporter

jobs:
- name: prometheus
  public: true
  plan:
  - aggregate:
    - get: git
    - get: prometheus
      trigger: true
      params: { globs: [prometheus-*.linux-amd64.tar.gz] }
  - task: update-prometheus
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: prometheus
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    prometheus
        BLOB_NAME:   prometheus
        BLOB_BINARY: prometheus*.linux-amd64.tar.gz
        BLOB_URL:    https://github.com/prometheus/prometheus
        BLOB_CLEANUP:     prometheus/prometheus.*
        BLOB_DESTINATION: prometheus/prometheus-${VERSION}.linux-amd64.tar.gz
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
- name: alertmanager
  public: true
  plan:
  - aggregate:
    - get: git
    - get: alertmanager
      trigger: true
      params: { globs: [alertmanager-*.linux-amd64.tar.gz] }
  - task: update-alertmanager
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: alertmanager
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    alertmanager
        BLOB_NAME:   alertmanager
        BLOB_BINARY: alertmanager*.linux-amd64.tar.gz
        BLOB_URL:    https://github.com/alertmanager/alertmanager
        BLOB_CLEANUP:     alertmanager/alertmanager.*
        BLOB_DESTINATION: alertmanager/alertmanager-${VERSION}.linux-amd64.tar.gz
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
- name: blackbox_exporter
  public: true
  plan:
  - aggregate:
    - get: git
    - get: blackbox_exporter
      trigger: true
      params: { globs: [blackbox_exporter-*.linux-amd64.tar.gz] }
  - task: update-blackbox_exporter
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: blackbox_exporter
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    blackbox_exporter
        BLOB_NAME:   blackbox_exporter
        BLOB_BINARY: blackbox_exporter*.linux-amd64.tar.gz
        BLOB_URL:    https://github.com/blackbox_exporter/blackbox_exporter
        BLOB_CLEANUP:     blackbox_exporter/blackbox_exporter.*
        BLOB_DESTINATION: blackbox_exporter/blackbox_exporter-${VERSION}.linux-amd64.tar.gz
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
- name: haproxy_exporter
  public: true
  plan:
  - aggregate:
    - get: git
    - get: haproxy_exporter
      trigger: true
      params: { globs: [haproxy_exporter-*.linux-amd64.tar.gz] }
  - task: update-haproxy_exporter
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: haproxy_exporter
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    haproxy_exporter
        BLOB_NAME:   haproxy_exporter
        BLOB_BINARY: haproxy_exporter*.linux-amd64.tar.gz
        BLOB_URL:    https://github.com/haproxy_exporter/haproxy_exporter
        BLOB_CLEANUP:     haproxy_exporter/haproxy_exporter.*
        BLOB_DESTINATION: haproxy_exporter/haproxy_exporter-${VERSION}.linux-amd64.tar.gz
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
- name: statsd_exporter
  public: true
  plan:
  - aggregate:
    - get: git
    - get: statsd_exporter
      trigger: true
      params: { globs: [statsd_exporter-*.linux-amd64.tar.gz] }
  - task: update-statsd_exporter
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: statsd_exporter
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    statsd_exporter
        BLOB_NAME:   statsd_exporter
        BLOB_BINARY: statsd_exporter*.linux-amd64.tar.gz
        BLOB_URL:    https://github.com/statsd_exporter/statsd_exporter
        BLOB_CLEANUP:     statsd_exporter/statsd_exporter.*
        BLOB_DESTINATION: statsd_exporter/statsd_exporter-${VERSION}.linux-amd64.tar.gz
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

resources:
  - name: prometheus
    type: github-release
    source:
      user:         prometheus
      repository:   prometheus
      access_token: (( grab meta.github.access_token ))
  - name: alertmanager
    type: github-release
    source:
      user:         prometheus
      repository:   alertmanager
      access_token: (( grab meta.github.access_token ))
  - name: blackbox_exporter
    type: github-release
    source:
      user:         prometheus
      repository:   blackbox_exporter
      access_token: (( grab meta.github.access_token ))
  - name: haproxy_exporter
    type: github-release
    source:
      user:         prometheus
      repository:   haproxy_exporter
      access_token: (( grab meta.github.access_token ))
  - name: statsd_exporter
    type: github-release
    source:
      user:         prometheus
      repository:   statsd_exporter
      access_token: (( grab meta.github.access_token ))
